# Copyright (c) 2019 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

parameters:
  # List of Python packages that need to be pip installed for testing.
  extra_test_dependencies: []
  # Git ref of tk-toolchain to use.
  tk_toolchain_ref: master
  # List of repositories to clone alongside this repository.
  # To clone the tk-framework-shotgunutils's master branch
  # and a specific tk-framework-qtwidget ref, you would
  # set this parameter to the following:
  # - name: tk-framework-shotgunutils
  # - name: tk-framework-qtwidgets
  #   ref: <branch-or-tag>
  additional_repositories: []
  # Git ref of tk-core to use.
  tk_core_ref: master
  # Post test steps
  # This is a list of Azure Pipeline steps that will be inserted
  # right after the tests were run.
  # If you wanted to run a non-standard suite of test as an extra
  # you would specify post_tests_steps as:
  # post_tests_steps:
  # - bash: do_something
  # - bash: do_something_else
  post_tests_steps: []
  # If set to true, the build agent will run unit tests.
  has_unit_tests: true
  # If set to true, the build agent will install the necessary libraries to run ui tests.
  # Note: Our ui tests currently only targeted Windows which means we ran our automation only
  # on Windows. For now they're disabled.
  # In order to re-enable them, just pass the has_ui_tests parameter.
  has_ui_tests: false
  # MPAS-MA repo ref value to be installed.
  ui_automation_ref: ""

# TODO: At some point, we should review how these environments are enumerated.
# Something like:
#
# parameters:
#   variants:
#     Linux:
#     - Qt: PySide2
#       Python: 3.7
#     - Qt: PyQt5
#       Python: 3.7
#     macOS:
#     - Qt: PySide2
#       Python: 3.7
#     - Qt: PyQt5
#       Python: 3.7
#     - Qt: PySide2
#       Python: 2.7
#     - Qt: PySide
#       Python: 2.7
#     Windows:
#     - Qt: PySide
#       Python: 2.7
#     - Qt: PySide2
#       Python: 3.7
#     - Qt: PyQt5
#       Python: 3.7
#
# This would give us a better view of what variants we are running.
# Having it as a parameter would allow us also us to pick
# which builds to use for certain repositories, is necessary.

jobs:
  - ${{ if eq( parameters.has_unit_tests, true ) }}:
      - template: run-tests-with.yml
        parameters:
          image_name: 'ubuntu-22.04'
          qt_wrapper: PySide2==5.14.1
          python_version: 3.7
          job_name: "Linux"
          # pass through all parameters
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'macos-12'
          qt_wrapper: PySide2==5.14.1
          python_version: 3.7
          job_name: "macOS"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'windows-2022'
          qt_wrapper: PySide2==5.14.1
          python_version: 3.7
          job_name: "Windows"
          # pass through all parameters
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}
          ui_automation_ref: ${{ parameters.ui_automation_ref }}

      # ------------------------
      - template: run-tests-with.yml
        parameters:
          image_name: 'windows-2022'
          python_version: 3.9
          job_name: "Windows"
          # pass through all parameters
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}
          ui_automation_ref: ${{ parameters.ui_automation_ref }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'macOS-12'
          python_version: 3.9
          job_name: "macOS"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'ubuntu-22.04'
          python_version: 3.9
          job_name: "Linux"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      # -------------------------
      - template: run-tests-with.yml
        parameters:
          image_name: 'windows-2022'
          python_version: 3.10
          job_name: "Windows"
          # pass through all parameters
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}
          ui_automation_ref: ${{ parameters.ui_automation_ref }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'macOS-12'
          python_version: 3.10
          job_name: "macOS"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'ubuntu-22.04'
          python_version: 3.10
          job_name: "Linux"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      # -------------------------
      - template: run-tests-with.yml
        parameters:
          image_name: 'windows-2022'
          python_version: 3.11
          job_name: "Windows"
          # pass through all parameters
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}
          ui_automation_ref: ${{ parameters.ui_automation_ref }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'macOS-12'
          python_version: 3.11
          job_name: "macOS"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}

      - template: run-tests-with.yml
        parameters:
          image_name: 'ubuntu-22.04'
          python_version: 3.11
          job_name: "Linux"
          # pass through all parameters.
          extra_test_dependencies: ${{ parameters.extra_test_dependencies }}
          tk_toolchain_ref: ${{ parameters.tk_toolchain_ref }}
          additional_repositories: ${{ parameters.additional_repositories }}
          tk_core_ref: ${{ parameters.tk_core_ref }}
          post_tests_steps: ${{ parameters.post_tests_steps }}
          has_unit_tests: ${{ parameters.has_unit_tests }}
